
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Mon Jun 20 23:17:56 CST 2011
//----------------------------------------------------

package parser;

import scanner.Scanner;
import notifier.Notifier;
import absyn.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Mon Jun 20 23:17:56 CST 2011
  */
public class Parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\101\000\002\002\004\000\002\002\003\000\002\002" +
    "\003\000\002\002\003\000\002\002\003\000\002\002\004" +
    "\000\002\002\005\000\002\002\005\000\002\002\005\000" +
    "\002\002\005\000\002\002\005\000\002\002\005\000\002" +
    "\002\005\000\002\002\005\000\002\002\005\000\002\002" +
    "\005\000\002\002\005\000\002\002\005\000\002\002\005" +
    "\000\002\002\006\000\002\002\005\000\002\002\006\000" +
    "\002\002\010\000\002\002\006\000\002\002\010\000\002" +
    "\002\006\000\002\002\012\000\002\002\003\000\002\002" +
    "\007\000\002\003\003\000\002\003\005\000\002\004\002" +
    "\000\002\004\003\000\002\005\003\000\002\005\005\000" +
    "\002\006\002\000\002\006\003\000\002\007\005\000\002" +
    "\007\007\000\002\010\002\000\002\010\003\000\002\022" +
    "\003\000\002\022\003\000\002\023\006\000\002\023\005" +
    "\000\002\023\006\000\002\023\005\000\002\012\003\000" +
    "\002\012\004\000\002\011\003\000\002\011\003\000\002" +
    "\011\003\000\002\013\006\000\002\016\003\000\002\016" +
    "\005\000\002\016\005\000\002\020\003\000\002\020\005" +
    "\000\002\021\002\000\002\021\003\000\002\017\005\000" +
    "\002\014\006\000\002\014\010\000\002\015\011\000\002" +
    "\015\013" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\212\000\030\005\021\011\007\013\013\015\016\016" +
    "\010\024\006\025\014\026\004\027\012\033\011\043\005" +
    "\001\002\000\070\002\000\006\000\007\000\010\000\012" +
    "\000\014\000\020\000\021\000\022\000\023\000\030\000" +
    "\032\000\034\000\036\000\040\000\042\000\043\000\044" +
    "\000\045\000\047\000\050\000\051\000\052\000\053\000" +
    "\054\000\055\000\056\000\001\002\000\030\005\021\011" +
    "\007\013\013\015\016\016\010\024\006\025\014\026\004" +
    "\027\012\033\011\043\005\001\002\000\030\005\021\011" +
    "\007\013\013\015\016\016\010\024\006\025\014\026\004" +
    "\027\012\033\011\043\005\001\002\000\004\025\202\001" +
    "\002\000\070\002\ufffe\006\ufffe\007\ufffe\010\ufffe\012\ufffe" +
    "\014\ufffe\020\ufffe\021\ufffe\022\ufffe\023\ufffe\030\ufffe\032" +
    "\ufffe\034\ufffe\036\ufffe\040\ufffe\042\ufffe\043\ufffe\044\ufffe" +
    "\045\ufffe\047\ufffe\050\ufffe\051\ufffe\052\ufffe\053\ufffe\054" +
    "\ufffe\055\ufffe\056\ufffe\001\002\000\032\005\021\011\007" +
    "\013\013\015\016\016\010\024\006\025\014\026\004\027" +
    "\012\033\011\034\uffe2\043\005\001\002\000\070\002\uffff" +
    "\006\uffff\007\uffff\010\uffff\012\uffff\014\uffff\020\uffff\021" +
    "\uffff\022\uffff\023\uffff\030\uffff\032\uffff\034\uffff\036\uffff" +
    "\040\uffff\042\uffff\043\uffff\044\uffff\045\uffff\047\uffff\050" +
    "\uffff\051\uffff\052\uffff\053\uffff\054\uffff\055\uffff\056\uffff" +
    "\001\002\000\030\005\021\011\007\013\013\015\016\016" +
    "\010\024\006\025\014\026\004\027\012\033\011\043\005" +
    "\001\002\000\102\002\uffd8\006\uffd8\007\uffd8\010\uffd8\012" +
    "\uffd8\014\uffd8\020\uffd8\021\uffd8\022\uffd8\023\uffd8\030\uffd8" +
    "\032\uffd8\033\145\034\uffd8\035\144\036\uffd8\037\146\040" +
    "\uffd8\041\147\042\uffd8\043\uffd8\044\uffd8\045\uffd8\047\uffd8" +
    "\050\uffd8\051\uffd8\052\uffd8\053\uffd8\054\uffd8\055\uffd8\056" +
    "\uffd8\057\uffd8\001\002\000\034\002\143\042\030\043\024" +
    "\044\032\045\025\047\031\050\027\051\034\052\036\053" +
    "\033\054\035\055\037\056\026\001\002\000\010\012\066" +
    "\022\067\023\061\001\002\000\076\002\uffd7\006\uffd7\007" +
    "\uffd7\010\uffd7\012\uffd7\014\uffd7\020\uffd7\021\uffd7\022\uffd7" +
    "\023\uffd7\030\uffd7\032\uffd7\034\uffd7\035\054\036\uffd7\040" +
    "\uffd7\041\055\042\uffd7\043\uffd7\044\uffd7\045\uffd7\047\uffd7" +
    "\050\uffd7\051\uffd7\052\uffd7\053\uffd7\054\uffd7\055\uffd7\056" +
    "\uffd7\057\uffd7\001\002\000\072\002\ufffd\006\ufffd\007\ufffd" +
    "\010\ufffd\012\ufffd\014\ufffd\020\ufffd\021\ufffd\022\ufffd\023" +
    "\ufffd\030\ufffd\032\ufffd\034\ufffd\036\ufffd\040\ufffd\042\ufffd" +
    "\043\ufffd\044\ufffd\045\ufffd\047\ufffd\050\ufffd\051\ufffd\052" +
    "\ufffd\053\ufffd\054\ufffd\055\ufffd\056\ufffd\057\022\001\002" +
    "\000\070\002\uffe6\006\uffe6\007\uffe6\010\uffe6\012\uffe6\014" +
    "\uffe6\020\uffe6\021\uffe6\022\uffe6\023\uffe6\030\uffe6\032\uffe6" +
    "\034\uffe6\036\uffe6\040\uffe6\042\uffe6\043\uffe6\044\uffe6\045" +
    "\uffe6\047\uffe6\050\uffe6\051\uffe6\052\uffe6\053\uffe6\054\uffe6" +
    "\055\uffe6\056\uffe6\001\002\000\030\005\021\011\007\013" +
    "\013\015\016\016\010\024\006\025\014\026\004\027\012" +
    "\033\011\043\005\001\002\000\070\002\uffef\006\uffef\007" +
    "\uffef\010\uffef\012\uffef\014\uffef\020\uffef\021\uffef\022\uffef" +
    "\023\uffef\030\uffef\032\uffef\034\uffef\036\uffef\040\uffef\042" +
    "\030\043\024\044\032\045\025\047\031\050\027\051\034" +
    "\052\036\053\033\054\035\055\037\056\026\001\002\000" +
    "\030\005\021\011\007\013\013\015\016\016\010\024\006" +
    "\025\014\026\004\027\012\033\011\043\005\001\002\000" +
    "\030\005\021\011\007\013\013\015\016\016\010\024\006" +
    "\025\014\026\004\027\012\033\011\043\005\001\002\000" +
    "\030\005\021\011\007\013\013\015\016\016\010\024\006" +
    "\025\014\026\004\027\012\033\011\043\005\001\002\000" +
    "\030\005\021\011\007\013\013\015\016\016\010\024\006" +
    "\025\014\026\004\027\012\033\011\043\005\001\002\000" +
    "\030\005\021\011\007\013\013\015\016\016\010\024\006" +
    "\025\014\026\004\027\012\033\011\043\005\001\002\000" +
    "\030\005\021\011\007\013\013\015\016\016\010\024\006" +
    "\025\014\026\004\027\012\033\011\043\005\001\002\000" +
    "\030\005\021\011\007\013\013\015\016\016\010\024\006" +
    "\025\014\026\004\027\012\033\011\043\005\001\002\000" +
    "\030\005\021\011\007\013\013\015\016\016\010\024\006" +
    "\025\014\026\004\027\012\033\011\043\005\001\002\000" +
    "\030\005\021\011\007\013\013\015\016\016\010\024\006" +
    "\025\014\026\004\027\012\033\011\043\005\001\002\000" +
    "\030\005\021\011\007\013\013\015\016\016\010\024\006" +
    "\025\014\026\004\027\012\033\011\043\005\001\002\000" +
    "\030\005\021\011\007\013\013\015\016\016\010\024\006" +
    "\025\014\026\004\027\012\033\011\043\005\001\002\000" +
    "\030\005\021\011\007\013\013\015\016\016\010\024\006" +
    "\025\014\026\004\027\012\033\011\043\005\001\002\000" +
    "\070\002\ufff1\006\ufff1\007\ufff1\010\ufff1\012\ufff1\014\ufff1" +
    "\020\ufff1\021\ufff1\022\ufff1\023\ufff1\030\ufff1\032\ufff1\034" +
    "\ufff1\036\ufff1\040\ufff1\042\030\043\024\044\032\045\025" +
    "\047\031\050\027\051\034\052\036\053\033\054\035\055" +
    "\ufff1\056\ufff1\001\002\000\054\002\ufff3\006\ufff3\007\ufff3" +
    "\010\ufff3\012\ufff3\014\ufff3\020\ufff3\021\ufff3\022\ufff3\023" +
    "\ufff3\030\ufff3\032\ufff3\034\ufff3\036\ufff3\040\ufff3\042\030" +
    "\043\024\044\032\045\025\055\ufff3\056\ufff3\001\002\000" +
    "\054\002\ufff2\006\ufff2\007\ufff2\010\ufff2\012\ufff2\014\ufff2" +
    "\020\ufff2\021\ufff2\022\ufff2\023\ufff2\030\ufff2\032\ufff2\034" +
    "\ufff2\036\ufff2\040\ufff2\042\030\043\024\044\032\045\025" +
    "\055\ufff2\056\ufff2\001\002\000\054\002\ufff5\006\ufff5\007" +
    "\ufff5\010\ufff5\012\ufff5\014\ufff5\020\ufff5\021\ufff5\022\ufff5" +
    "\023\ufff5\030\ufff5\032\ufff5\034\ufff5\036\ufff5\040\ufff5\042" +
    "\030\043\024\044\032\045\025\055\ufff5\056\ufff5\001\002" +
    "\000\054\002\ufff4\006\ufff4\007\ufff4\010\ufff4\012\ufff4\014" +
    "\ufff4\020\ufff4\021\ufff4\022\ufff4\023\ufff4\030\ufff4\032\ufff4" +
    "\034\ufff4\036\ufff4\040\ufff4\042\030\043\024\044\032\045" +
    "\025\055\ufff4\056\ufff4\001\002\000\070\002\ufff9\006\ufff9" +
    "\007\ufff9\010\ufff9\012\ufff9\014\ufff9\020\ufff9\021\ufff9\022" +
    "\ufff9\023\ufff9\030\ufff9\032\ufff9\034\ufff9\036\ufff9\040\ufff9" +
    "\042\ufff9\043\ufff9\044\ufff9\045\ufff9\047\ufff9\050\ufff9\051" +
    "\ufff9\052\ufff9\053\ufff9\054\ufff9\055\ufff9\056\ufff9\001\002" +
    "\000\054\002\ufff7\006\ufff7\007\ufff7\010\ufff7\012\ufff7\014" +
    "\ufff7\020\ufff7\021\ufff7\022\ufff7\023\ufff7\030\ufff7\032\ufff7" +
    "\034\ufff7\036\ufff7\040\ufff7\042\030\043\024\044\032\045" +
    "\025\055\ufff7\056\ufff7\001\002\000\070\002\ufffb\006\ufffb" +
    "\007\ufffb\010\ufffb\012\ufffb\014\ufffb\020\ufffb\021\ufffb\022" +
    "\ufffb\023\ufffb\030\ufffb\032\ufffb\034\ufffb\036\ufffb\040\ufffb" +
    "\042\ufffb\043\ufffb\044\032\045\025\047\ufffb\050\ufffb\051" +
    "\ufffb\052\ufffb\053\ufffb\054\ufffb\055\ufffb\056\ufffb\001\002" +
    "\000\054\002\ufff6\006\ufff6\007\ufff6\010\ufff6\012\ufff6\014" +
    "\ufff6\020\ufff6\021\ufff6\022\ufff6\023\ufff6\030\ufff6\032\ufff6" +
    "\034\ufff6\036\ufff6\040\ufff6\042\030\043\024\044\032\045" +
    "\025\055\ufff6\056\ufff6\001\002\000\070\002\ufff0\006\ufff0" +
    "\007\ufff0\010\ufff0\012\ufff0\014\ufff0\020\ufff0\021\ufff0\022" +
    "\ufff0\023\ufff0\030\ufff0\032\ufff0\034\ufff0\036\ufff0\040\ufff0" +
    "\042\030\043\024\044\032\045\025\047\031\050\027\051" +
    "\034\052\036\053\033\054\035\055\037\056\ufff0\001\002" +
    "\000\070\002\ufff8\006\ufff8\007\ufff8\010\ufff8\012\ufff8\014" +
    "\ufff8\020\ufff8\021\ufff8\022\ufff8\023\ufff8\030\ufff8\032\ufff8" +
    "\034\ufff8\036\ufff8\040\ufff8\042\ufff8\043\ufff8\044\ufff8\045" +
    "\ufff8\047\ufff8\050\ufff8\051\ufff8\052\ufff8\053\ufff8\054\ufff8" +
    "\055\ufff8\056\ufff8\001\002\000\070\002\ufffa\006\ufffa\007" +
    "\ufffa\010\ufffa\012\ufffa\014\ufffa\020\ufffa\021\ufffa\022\ufffa" +
    "\023\ufffa\030\ufffa\032\ufffa\034\ufffa\036\ufffa\040\ufffa\042" +
    "\ufffa\043\ufffa\044\032\045\025\047\ufffa\050\ufffa\051\ufffa" +
    "\052\ufffa\053\ufffa\054\ufffa\055\ufffa\056\ufffa\001\002\000" +
    "\030\005\021\011\007\013\013\015\016\016\010\024\006" +
    "\025\014\026\004\027\012\033\011\043\005\001\002\000" +
    "\004\025\056\001\002\000\076\002\uffd3\006\uffd3\007\uffd3" +
    "\010\uffd3\012\uffd3\014\uffd3\020\uffd3\021\uffd3\022\uffd3\023" +
    "\uffd3\030\uffd3\032\uffd3\034\uffd3\035\uffd3\036\uffd3\040\uffd3" +
    "\041\uffd3\042\uffd3\043\uffd3\044\uffd3\045\uffd3\047\uffd3\050" +
    "\uffd3\051\uffd3\052\uffd3\053\uffd3\054\uffd3\055\uffd3\056\uffd3" +
    "\057\uffd3\001\002\000\034\036\060\042\030\043\024\044" +
    "\032\045\025\047\031\050\027\051\034\052\036\053\033" +
    "\054\035\055\037\056\026\001\002\000\076\002\uffd4\006" +
    "\uffd4\007\uffd4\010\uffd4\012\uffd4\014\uffd4\020\uffd4\021\uffd4" +
    "\022\uffd4\023\uffd4\030\uffd4\032\uffd4\034\uffd4\035\uffd4\036" +
    "\uffd4\040\uffd4\041\uffd4\042\uffd4\043\uffd4\044\uffd4\045\uffd4" +
    "\047\uffd4\050\uffd4\051\uffd4\052\uffd4\053\uffd4\054\uffd4\055" +
    "\uffd4\056\uffd4\057\uffd4\001\002\000\004\025\134\001\002" +
    "\000\012\012\uffd0\014\uffd0\022\uffd0\023\uffd0\001\002\000" +
    "\012\012\uffce\014\uffce\022\uffce\023\uffce\001\002\000\004" +
    "\014\125\001\002\000\012\012\uffcf\014\uffcf\022\uffcf\023" +
    "\uffcf\001\002\000\004\025\113\001\002\000\004\025\072" +
    "\001\002\000\012\012\066\014\uffd2\022\067\023\061\001" +
    "\002\000\004\014\uffd1\001\002\000\004\047\073\001\002" +
    "\000\010\004\077\025\076\037\075\001\002\000\012\012" +
    "\uffcd\014\uffcd\022\uffcd\023\uffcd\001\002\000\006\025\105" +
    "\040\uffc7\001\002\000\012\012\uffcc\014\uffcc\022\uffcc\023" +
    "\uffcc\001\002\000\004\017\100\001\002\000\004\025\101" +
    "\001\002\000\012\012\uffca\014\uffca\022\uffca\023\uffca\001" +
    "\002\000\006\034\uffc6\040\uffc6\001\002\000\010\030\111" +
    "\034\uffc9\040\uffc9\001\002\000\004\040\110\001\002\000" +
    "\004\031\106\001\002\000\004\025\107\001\002\000\010" +
    "\030\uffc5\034\uffc5\040\uffc5\001\002\000\012\012\uffcb\014" +
    "\uffcb\022\uffcb\023\uffcb\001\002\000\004\025\105\001\002" +
    "\000\006\034\uffc8\040\uffc8\001\002\000\004\033\114\001" +
    "\002\000\006\025\105\034\uffc7\001\002\000\004\034\116" +
    "\001\002\000\006\031\120\047\117\001\002\000\030\005" +
    "\021\011\007\013\013\015\016\016\010\024\006\025\014" +
    "\026\004\027\012\033\011\043\005\001\002\000\004\025" +
    "\121\001\002\000\004\047\122\001\002\000\030\005\021" +
    "\011\007\013\013\015\016\016\010\024\006\025\014\026" +
    "\004\027\012\033\011\043\005\001\002\000\042\012\uffc1" +
    "\014\uffc1\022\uffc1\023\uffc1\042\030\043\024\044\032\045" +
    "\025\047\031\050\027\051\034\052\036\053\033\054\035" +
    "\055\037\056\026\001\002\000\042\012\uffc2\014\uffc2\022" +
    "\uffc2\023\uffc2\042\030\043\024\044\032\045\025\047\031" +
    "\050\027\051\034\052\036\053\033\054\035\055\037\056" +
    "\026\001\002\000\032\005\021\010\uffe2\011\007\013\013" +
    "\015\016\016\010\024\006\025\014\026\004\027\012\033" +
    "\011\043\005\001\002\000\004\010\133\001\002\000\006" +
    "\010\uffe1\034\uffe1\001\002\000\040\010\uffe4\032\131\034" +
    "\uffe4\042\030\043\024\044\032\045\025\047\031\050\027" +
    "\051\034\052\036\053\033\054\035\055\037\056\026\001" +
    "\002\000\030\005\021\011\007\013\013\015\016\016\010" +
    "\024\006\025\014\026\004\027\012\033\011\043\005\001" +
    "\002\000\006\010\uffe3\034\uffe3\001\002\000\070\002\uffe5" +
    "\006\uffe5\007\uffe5\010\uffe5\012\uffe5\014\uffe5\020\uffe5\021" +
    "\uffe5\022\uffe5\023\uffe5\030\uffe5\032\uffe5\034\uffe5\036\uffe5" +
    "\040\uffe5\042\uffe5\043\uffe5\044\uffe5\045\uffe5\047\uffe5\050" +
    "\uffe5\051\uffe5\052\uffe5\053\uffe5\054\uffe5\055\uffe5\056\uffe5" +
    "\001\002\000\006\031\136\057\135\001\002\000\030\005" +
    "\021\011\007\013\013\015\016\016\010\024\006\025\014" +
    "\026\004\027\012\033\011\043\005\001\002\000\004\025" +
    "\137\001\002\000\004\057\140\001\002\000\030\005\021" +
    "\011\007\013\013\015\016\016\010\024\006\025\014\026" +
    "\004\027\012\033\011\043\005\001\002\000\042\012\uffc3" +
    "\014\uffc3\022\uffc3\023\uffc3\042\030\043\024\044\032\045" +
    "\025\047\031\050\027\051\034\052\036\053\033\054\035" +
    "\055\037\056\026\001\002\000\042\012\uffc4\014\uffc4\022" +
    "\uffc4\023\uffc4\042\030\043\024\044\032\045\025\047\031" +
    "\050\027\051\034\052\036\053\033\054\035\055\037\056" +
    "\026\001\002\000\004\002\001\001\002\000\030\005\021" +
    "\011\007\013\013\015\016\016\010\024\006\025\014\026" +
    "\004\027\012\033\011\043\005\001\002\000\032\005\021" +
    "\011\007\013\013\015\016\016\010\024\006\025\014\026" +
    "\004\027\012\033\011\034\uffde\043\005\001\002\000\006" +
    "\025\152\040\uffda\001\002\000\004\025\150\001\002\000" +
    "\076\002\uffd5\006\uffd5\007\uffd5\010\uffd5\012\uffd5\014\uffd5" +
    "\020\uffd5\021\uffd5\022\uffd5\023\uffd5\030\uffd5\032\uffd5\034" +
    "\uffd5\035\uffd5\036\uffd5\040\uffd5\041\uffd5\042\uffd5\043\uffd5" +
    "\044\uffd5\045\uffd5\047\uffd5\050\uffd5\051\uffd5\052\uffd5\053" +
    "\uffd5\054\uffd5\055\uffd5\056\uffd5\057\uffd5\001\002\000\004" +
    "\040\160\001\002\000\004\047\154\001\002\000\004\040" +
    "\uffd9\001\002\000\030\005\021\011\007\013\013\015\016" +
    "\016\010\024\006\025\014\026\004\027\012\033\011\043" +
    "\005\001\002\000\036\030\156\040\uffdc\042\030\043\024" +
    "\044\032\045\025\047\031\050\027\051\034\052\036\053" +
    "\033\054\035\055\037\056\026\001\002\000\004\025\152" +
    "\001\002\000\004\040\uffdb\001\002\000\070\002\uffec\006" +
    "\uffec\007\uffec\010\uffec\012\uffec\014\uffec\020\uffec\021\uffec" +
    "\022\uffec\023\uffec\030\uffec\032\uffec\034\uffec\036\uffec\040" +
    "\uffec\042\uffec\043\uffec\044\uffec\045\uffec\047\uffec\050\uffec" +
    "\051\uffec\052\uffec\053\uffec\054\uffec\055\uffec\056\uffec\001" +
    "\002\000\004\034\uffdd\001\002\000\004\034\166\001\002" +
    "\000\036\030\164\034\uffe0\042\030\043\024\044\032\045" +
    "\025\047\031\050\027\051\034\052\036\053\033\054\035" +
    "\055\037\056\026\001\002\000\030\005\021\011\007\013" +
    "\013\015\016\016\010\024\006\025\014\026\004\027\012" +
    "\033\011\043\005\001\002\000\004\034\uffdf\001\002\000" +
    "\070\002\uffee\006\uffee\007\uffee\010\uffee\012\uffee\014\uffee" +
    "\020\uffee\021\uffee\022\uffee\023\uffee\030\uffee\032\uffee\034" +
    "\uffee\036\uffee\040\uffee\042\uffee\043\uffee\044\uffee\045\uffee" +
    "\047\uffee\050\uffee\051\uffee\052\uffee\053\uffee\054\uffee\055" +
    "\uffee\056\uffee\001\002\000\034\036\170\042\030\043\024" +
    "\044\032\045\025\047\031\050\027\051\034\052\036\053" +
    "\033\054\035\055\037\056\026\001\002\000\100\002\uffd6" +
    "\006\uffd6\007\uffd6\010\uffd6\012\uffd6\014\uffd6\017\171\020" +
    "\uffd6\021\uffd6\022\uffd6\023\uffd6\030\uffd6\032\uffd6\034\uffd6" +
    "\035\uffd6\036\uffd6\040\uffd6\041\uffd6\042\uffd6\043\uffd6\044" +
    "\uffd6\045\uffd6\047\uffd6\050\uffd6\051\uffd6\052\uffd6\053\uffd6" +
    "\054\uffd6\055\uffd6\056\uffd6\057\uffd6\001\002\000\030\005" +
    "\021\011\007\013\013\015\016\016\010\024\006\025\014" +
    "\026\004\027\012\033\011\043\005\001\002\000\070\002" +
    "\uffeb\006\uffeb\007\uffeb\010\uffeb\012\uffeb\014\uffeb\020\uffeb" +
    "\021\uffeb\022\uffeb\023\uffeb\030\uffeb\032\uffeb\034\uffeb\036" +
    "\uffeb\040\uffeb\042\030\043\024\044\032\045\025\047\031" +
    "\050\027\051\034\052\036\053\033\054\035\055\037\056" +
    "\026\001\002\000\034\020\174\042\030\043\024\044\032" +
    "\045\025\047\031\050\027\051\034\052\036\053\033\054" +
    "\035\055\037\056\026\001\002\000\030\005\021\011\007" +
    "\013\013\015\016\016\010\024\006\025\014\026\004\027" +
    "\012\033\011\043\005\001\002\000\070\002\uffea\006\uffea" +
    "\007\176\010\uffea\012\uffea\014\uffea\020\uffea\021\uffea\022" +
    "\uffea\023\uffea\030\uffea\032\uffea\034\uffea\036\uffea\040\uffea" +
    "\042\030\043\024\044\032\045\025\047\031\050\027\051" +
    "\034\052\036\053\033\054\035\055\037\056\026\001\002" +
    "\000\030\005\021\011\007\013\013\015\016\016\010\024" +
    "\006\025\014\026\004\027\012\033\011\043\005\001\002" +
    "\000\070\002\uffe9\006\uffe9\007\uffe9\010\uffe9\012\uffe9\014" +
    "\uffe9\020\uffe9\021\uffe9\022\uffe9\023\uffe9\030\uffe9\032\uffe9" +
    "\034\uffe9\036\uffe9\040\uffe9\042\030\043\024\044\032\045" +
    "\025\047\031\050\027\051\034\052\036\053\033\054\035" +
    "\055\037\056\026\001\002\000\004\034\201\001\002\000" +
    "\070\002\uffed\006\uffed\007\uffed\010\uffed\012\uffed\014\uffed" +
    "\020\uffed\021\uffed\022\uffed\023\uffed\030\uffed\032\uffed\034" +
    "\uffed\036\uffed\040\uffed\042\uffed\043\uffed\044\uffed\045\uffed" +
    "\047\uffed\050\uffed\051\uffed\052\uffed\053\uffed\054\uffed\055" +
    "\uffed\056\uffed\001\002\000\004\057\203\001\002\000\030" +
    "\005\021\011\007\013\013\015\016\016\010\024\006\025" +
    "\014\026\004\027\012\033\011\043\005\001\002\000\034" +
    "\021\205\042\030\043\024\044\032\045\025\047\031\050" +
    "\027\051\034\052\036\053\033\054\035\055\037\056\026" +
    "\001\002\000\030\005\021\011\007\013\013\015\016\016" +
    "\010\024\006\025\014\026\004\027\012\033\011\043\005" +
    "\001\002\000\034\006\207\042\030\043\024\044\032\045" +
    "\025\047\031\050\027\051\034\052\036\053\033\054\035" +
    "\055\037\056\026\001\002\000\030\005\021\011\007\013" +
    "\013\015\016\016\010\024\006\025\014\026\004\027\012" +
    "\033\011\043\005\001\002\000\070\002\uffe7\006\uffe7\007" +
    "\uffe7\010\uffe7\012\uffe7\014\uffe7\020\uffe7\021\uffe7\022\uffe7" +
    "\023\uffe7\030\uffe7\032\uffe7\034\uffe7\036\uffe7\040\uffe7\042" +
    "\030\043\024\044\032\045\025\047\031\050\027\051\034" +
    "\052\036\053\033\054\035\055\037\056\026\001\002\000" +
    "\034\006\212\042\030\043\024\044\032\045\025\047\031" +
    "\050\027\051\034\052\036\053\033\054\035\055\037\056" +
    "\026\001\002\000\030\005\021\011\007\013\013\015\016" +
    "\016\010\024\006\025\014\026\004\027\012\033\011\043" +
    "\005\001\002\000\070\002\uffe8\006\uffe8\007\uffe8\010\uffe8" +
    "\012\uffe8\014\uffe8\020\uffe8\021\uffe8\022\uffe8\023\uffe8\030" +
    "\uffe8\032\uffe8\034\uffe8\036\uffe8\040\uffe8\042\030\043\024" +
    "\044\032\045\025\047\031\050\027\051\034\052\036\053" +
    "\033\054\035\055\037\056\026\001\002\000\070\002\ufffc" +
    "\006\ufffc\007\ufffc\010\ufffc\012\ufffc\014\ufffc\020\ufffc\021" +
    "\ufffc\022\ufffc\023\ufffc\030\ufffc\032\ufffc\034\ufffc\036\ufffc" +
    "\040\ufffc\042\ufffc\043\ufffc\044\ufffc\045\ufffc\047\ufffc\050" +
    "\ufffc\051\ufffc\052\ufffc\053\ufffc\054\ufffc\055\ufffc\056\ufffc" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\212\000\010\002\014\022\017\023\016\001\001\000" +
    "\002\001\001\000\010\002\213\022\017\023\016\001\001" +
    "\000\010\002\210\022\017\023\016\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\002\127\003\126\004\177" +
    "\022\017\023\016\001\001\000\002\001\001\000\010\002" +
    "\172\022\017\023\016\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\011\067\012\063\013\061\014\064\015" +
    "\062\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\002\022\022\017\023\016\001\001\000" +
    "\002\001\001\000\010\002\052\022\017\023\016\001\001" +
    "\000\010\002\051\022\017\023\016\001\001\000\010\002" +
    "\050\022\017\023\016\001\001\000\010\002\047\022\017" +
    "\023\016\001\001\000\010\002\046\022\017\023\016\001" +
    "\001\000\010\002\045\022\017\023\016\001\001\000\010" +
    "\002\044\022\017\023\016\001\001\000\010\002\043\022" +
    "\017\023\016\001\001\000\010\002\042\022\017\023\016" +
    "\001\001\000\010\002\041\022\017\023\016\001\001\000" +
    "\010\002\040\022\017\023\016\001\001\000\010\002\037" +
    "\022\017\023\016\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\002\056\022\017\023\016\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\011\067\012\070\013\061\014" +
    "\064\015\062\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\016\073\001\001\000\002\001\001\000\010\017" +
    "\102\020\101\021\103\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\017\102\020\111\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\017\102\020\101\021\114\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\002\123\022\017" +
    "\023\016\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\002\122\022\017\023\016\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\002\127\003\126\004\125\022" +
    "\017\023\016\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\002\127\003\131\022\017\023" +
    "\016\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\002\141\022\017\023\016\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\002\140\022\017" +
    "\023\016\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\002\166\022\017\023\016\001\001" +
    "\000\014\002\162\005\160\006\161\022\017\023\016\001" +
    "\001\000\006\007\152\010\150\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\002\154\022\017\023\016\001\001" +
    "\000\002\001\001\000\004\007\156\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\002\162\005\164\022\017\023" +
    "\016\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\002\171\022\017\023" +
    "\016\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\002\174\022\017\023\016\001\001\000\002\001\001\000" +
    "\010\002\176\022\017\023\016\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\002\203\022\017\023\016\001\001\000\002\001\001" +
    "\000\010\002\205\022\017\023\016\001\001\000\002\001" +
    "\001\000\010\002\207\022\017\023\016\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\002\212\022\017\023" +
    "\016\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return scanner.next_token(); 
    }


    private Scanner scanner;
    private Notifier notifier;

    public Parser(Scanner scanner, Notifier notifier) {
        super(scanner);
        this.scanner = scanner;
        this.notifier = notifier;
    }

    public void report_error(String message, Object o) {
        if (o instanceof java_cup.runtime.Symbol) {
            java_cup.runtime.Symbol s = (java_cup.runtime.Symbol)o;

            String m = message;
            if (s.sym == sym.error)
                m += ": " + s.value.toString();
            notifier.error(m, s.left);
        }
    }

    public void report_fatal_error(String message, Object o) {
        notifier.message("Cannot recover from previous error(s). Halting");
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Parser$actions {


    static symbol.Symbol sym(String id) {
        return symbol.Symbol.symbol(id);
    }

  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // function_declaration ::= FUNCTION IDENTIFIER LEFT_PARENTHESIS type_fields_opt RIGHT_PARENTHESIS COLON IDENTIFIER EQ expr 
            {
              FuncDecl RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		TypeFields p = (TypeFields)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new FuncDecl(lleft, sym(f), p, sym(t), b); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("function_declaration",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // function_declaration ::= FUNCTION IDENTIFIER LEFT_PARENTHESIS type_fields_opt RIGHT_PARENTHESIS EQ expr 
            {
              FuncDecl RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		TypeFields p = (TypeFields)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new FuncDecl(lleft, sym(f), p, b); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("function_declaration",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // variable_declaration ::= VAR IDENTIFIER COLON IDENTIFIER ASSIGNMENT expr 
            {
              VarDecl RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr v = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new VarDecl(lleft, sym(var), sym(t), v); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable_declaration",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // variable_declaration ::= VAR IDENTIFIER ASSIGNMENT expr 
            {
              VarDecl RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr v = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new VarDecl(lleft, sym(var), v); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable_declaration",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // type_field ::= IDENTIFIER COLON IDENTIFIER 
            {
              TypeField RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new TypeField(nleft, sym(n), sym(t)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_field",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // type_fields_opt ::= type_fields 
            {
              TypeFields RESULT =null;
		int tfsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tfsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		TypeFields tfs = (TypeFields)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = tfs; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_fields_opt",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // type_fields_opt ::= 
            {
              TypeFields RESULT =null;
		 RESULT = null; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_fields_opt",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // type_fields ::= type_field COMMA type_fields 
            {
              TypeFields RESULT =null;
		int tfleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tfright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		TypeField tf = (TypeField)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int tfsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tfsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		TypeFields tfs = (TypeFields)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new TypeFields(tfleft, tf, tfs); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_fields",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // type_fields ::= type_field 
            {
              TypeFields RESULT =null;
		int tfleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tfright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		TypeField tf = (TypeField)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new TypeFields(tfleft, tf, null); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_fields",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // type ::= ARRAY OF IDENTIFIER 
            {
              Type RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ArrayType(lleft, sym(t)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // type ::= LEFT_CURLY_BRACKET type_fields_opt RIGHT_CURLY_BRACKET 
            {
              Type RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int tfleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tfright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		TypeFields tf = (TypeFields)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new RecordType(lleft, tf); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // type ::= IDENTIFIER 
            {
              Type RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NameType(nleft, sym(n)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // type_declaration ::= TYPE IDENTIFIER EQ type 
            {
              TypeDecl RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new TypeDecl(lleft, sym(n), t); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_declaration",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // declaration ::= function_declaration 
            {
              Decl RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		FuncDecl d = (FuncDecl)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = d; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaration",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // declaration ::= variable_declaration 
            {
              Decl RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		VarDecl d = (VarDecl)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = d; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaration",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // declaration ::= type_declaration 
            {
              Decl RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		TypeDecl d = (TypeDecl)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = d; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaration",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // declaration_list ::= declaration declaration_list 
            {
              DeclList RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Decl d = (Decl)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int dlleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dlright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		DeclList dl = (DeclList)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new DeclList(dleft, d, dl); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaration_list",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // declaration_list ::= declaration 
            {
              DeclList RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Decl d = (Decl)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new DeclList(dleft, d, null); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaration_list",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // lvalue_d ::= lvalue_d DOT IDENTIFIER 
            {
              LValue RESULT =null;
		int lvleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lvright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		LValue lv = (LValue)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new FieldLValue(lvleft, lv, sym(f)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lvalue_d",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // lvalue_d ::= lvalue_d LEFT_SQUARE_BRACKET expr RIGHT_SQUARE_BRACKET 
            {
              LValue RESULT =null;
		int lvleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int lvright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		LValue lv = (LValue)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expr i = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new SubscriptLValue(lvleft, lv, i); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lvalue_d",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // lvalue_d ::= IDENTIFIER DOT IDENTIFIER 
            {
              LValue RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new FieldLValue(vleft, new VarLValue(vleft, sym(v)), sym(f)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lvalue_d",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // lvalue_d ::= IDENTIFIER LEFT_SQUARE_BRACKET expr RIGHT_SQUARE_BRACKET 
            {
              LValue RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expr i = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new SubscriptLValue(idleft, new VarLValue(idleft, sym(id)), i); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lvalue_d",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // lvalue ::= lvalue_d 
            {
              LValue RESULT =null;
		int lvleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lvright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		LValue lv = (LValue)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = lv; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lvalue",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // lvalue ::= IDENTIFIER 
            {
              LValue RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new VarLValue(idleft, sym(id)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lvalue",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // field_list_opt ::= field_list 
            {
              FieldList RESULT =null;
		int flleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int flright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		FieldList fl = (FieldList)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = fl; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("field_list_opt",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // field_list_opt ::= 
            {
              FieldList RESULT =null;
		 RESULT = null; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("field_list_opt",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // field_list ::= IDENTIFIER EQ expr COMMA field_list 
            {
              FieldList RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr v = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int flleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int flright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		FieldList fl = (FieldList)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new FieldList(idleft, sym(id), v, fl); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("field_list",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // field_list ::= IDENTIFIER EQ expr 
            {
              FieldList RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr v = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new FieldList(idleft, sym(id), v, null); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("field_list",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // expr_list_opt ::= expr_list 
            {
              ExprList RESULT =null;
		int elleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int elright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ExprList el = (ExprList)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = el; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_list_opt",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // expr_list_opt ::= 
            {
              ExprList RESULT =null;
		 RESULT = null; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_list_opt",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // expr_list ::= expr COMMA expr_list 
            {
              ExprList RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int elleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int elright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ExprList el = (ExprList)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ExprList(eleft, e, el); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_list",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // expr_list ::= expr 
            {
              ExprList RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ExprList(eleft, e, null); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_list",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // expr_seq_opt ::= expr_seq 
            {
              ExprList RESULT =null;
		int elleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int elright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ExprList el = (ExprList)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = el; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_seq_opt",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // expr_seq_opt ::= 
            {
              ExprList RESULT =null;
		 RESULT = null; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_seq_opt",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // expr_seq ::= expr SEMICOLON expr_seq 
            {
              ExprList RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int esleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int esright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ExprList es = (ExprList)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ExprList(eleft, e, es); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_seq",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // expr_seq ::= expr 
            {
              ExprList RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ExprList(eleft, e, null); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_seq",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // expr ::= LET declaration_list IN expr_seq_opt END 
            {
              Expr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int decllleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int decllright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		DeclList decll = (DeclList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int exprlleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int exprlright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ExprList exprl = (ExprList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new LetExpr(lleft, decll, exprl); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // expr ::= BREAK 
            {
              Expr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BreakExpr(lleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // expr ::= FOR IDENTIFIER ASSIGNMENT expr TO expr DO expr 
            {
              Expr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int beginleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int beginright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Expr begin = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr end = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr body = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ForExpr(lleft, sym(id), begin, end, body); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // expr ::= WHILE expr DO expr 
            {
              Expr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int condleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr cond = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr body = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new WhileExpr(lleft, cond, body); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // expr ::= IF expr THEN expr ELSE expr 
            {
              Expr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int condleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Expr cond = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int thencleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int thencright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr thenc = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int elsecleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int elsecright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr elsec = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new IfExpr(lleft, cond, thenc, elsec); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // expr ::= IF expr THEN expr 
            {
              Expr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int condleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr cond = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int thencleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int thencright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr thenc = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new IfExpr(lleft, cond, thenc); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // expr ::= IDENTIFIER LEFT_SQUARE_BRACKET expr RIGHT_SQUARE_BRACKET OF expr 
            {
              Expr RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int sizeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int sizeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Expr size = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int initleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int initright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr init = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ArrayExpr(idleft, sym(id), size, init); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // expr ::= IDENTIFIER LEFT_CURLY_BRACKET field_list_opt RIGHT_CURLY_BRACKET 
            {
              Expr RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int flleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int flright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		FieldList fl = (FieldList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new RecordExpr(idleft, sym(id), fl); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // expr ::= LEFT_PARENTHESIS expr_seq_opt RIGHT_PARENTHESIS 
            {
              Expr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ExprList e = (ExprList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new SeqExpr(lleft, e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // expr ::= IDENTIFIER LEFT_PARENTHESIS expr_list_opt RIGHT_PARENTHESIS 
            {
              Expr RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int paramleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int paramright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ExprList param = (ExprList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new CallExpr(idleft, sym(id), param); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // expr ::= lvalue ASSIGNMENT expr 
            {
              Expr RESULT =null;
		int lvleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lvright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		LValue lv = (LValue)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new AssignmentExpr(lvleft, lv, e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // expr ::= expr VERTICAL_BAR expr 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new OpExpr(e1left, OpExpr.Op.OR, e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // expr ::= expr AMPERSAND expr 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new OpExpr(e1left, OpExpr.Op.AND, e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // expr ::= expr GEQ expr 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new OpExpr(e1left, OpExpr.Op.GEQ, e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // expr ::= expr LEQ expr 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new OpExpr(e1left, OpExpr.Op.LEQ, e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // expr ::= expr GT expr 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new OpExpr(e1left, OpExpr.Op.GT, e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // expr ::= expr LT expr 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new OpExpr(e1left, OpExpr.Op.LT, e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // expr ::= expr NEQ expr 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new OpExpr(e1left, OpExpr.Op.NEQ, e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // expr ::= expr EQ expr 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new OpExpr(e1left, OpExpr.Op.EQ, e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // expr ::= expr SLASH expr 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new OpExpr(e1left, OpExpr.Op.DIV, e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // expr ::= expr ASTERISK expr 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new OpExpr(e1left, OpExpr.Op.MUL, e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // expr ::= expr MINUS expr 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new OpExpr(e1left, OpExpr.Op.SUB, e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // expr ::= expr PLUS expr 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new OpExpr(e1left, OpExpr.Op.ADD, e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // expr ::= MINUS expr 
            {
              Expr RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NegationExpr(mleft, e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // expr ::= lvalue 
            {
              Expr RESULT =null;
		int lvleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lvright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		LValue lv = (LValue)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new LValueExpr(lvleft, lv); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // expr ::= NIL 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NilExpr(eleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // expr ::= INTEGER_CONSTANT 
            {
              Expr RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer i = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new IntExpr(ileft, i); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // expr ::= STRING_CONSTANT 
            {
              Expr RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new StringExpr(sleft, s); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= expr EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expr start_val = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

